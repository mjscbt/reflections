What happens when you initialize a repository? Why do you need to do it?

	Initializing a repository creates the hidden git directory which holds
	metadata. This metadata is used to track the changes made to files in
	the repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

How can you use the staging area to make sure you have one commit per logical
change?

	Using "git diff --staged" I can look at the difference introduced compared
	to the most recent commit. This should only be one logical change

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Creating a different version of a project in order to try out something,
	without having to "mess up" the main build is useful. Having branches
	allows for easy switching between the different versions

How do the diagrams help you visualize the branch structure?

	Diagrams show which commits belong to a certain branch and where they
	were created

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	Merging two branches creates a version with the changes from both branches.
	The representation in the diagram shows that the current master has links
	to commits in both branches. git diff will now show all commits from the
	differnt branches sorted by time stamp.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

	Always doing merges manually would be very tedious and time consuming so
	having the possibility of automatic merging speeds up the developmnet 
	process. Of course auto merge cannot always work, so sometimes conflicts
	need to be resolved manually.
